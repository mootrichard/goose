// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AddSubRecipesData, AddSubRecipesResponse2, GetToolsData, GetToolsResponse, ReadAllConfigData, ReadAllConfigResponse, BackupConfigData, BackupConfigResponse, GetExtensionsData, GetExtensionsResponse, AddExtensionData, AddExtensionResponse, RemoveExtensionData, RemoveExtensionResponse, InitConfigData, InitConfigResponse, UpsertPermissionsData, UpsertPermissionsResponse, ProvidersData, ProvidersResponse2, ReadConfigData, RecoverConfigData, RecoverConfigResponse, RemoveConfigData, RemoveConfigResponse, UpsertConfigData, UpsertConfigResponse, ValidateConfigData, ValidateConfigResponse, ConfirmPermissionData, ManageContextData, ManageContextResponse, CreateRecipeData, CreateRecipeResponse2, DecodeRecipeData, DecodeRecipeResponse2, EncodeRecipeData, EncodeRecipeResponse2, CreateScheduleData, CreateScheduleResponse, DeleteScheduleData, DeleteScheduleResponse, ListSchedulesData, ListSchedulesResponse2, UpdateScheduleData, UpdateScheduleResponse, InspectRunningJobData, InspectRunningJobResponse, KillRunningJobData, PauseScheduleData, PauseScheduleResponse, RunNowHandlerData, RunNowHandlerResponse, SessionsHandlerData, SessionsHandlerResponse, UnpauseScheduleData, UnpauseScheduleResponse, ListSessionsData, ListSessionsResponse, GetSessionHistoryData, GetSessionHistoryResponse, ListSystemPromptsData, ListSystemPromptsResponse, CreateSystemPromptData, CreateSystemPromptResponse, GetDefaultSystemPromptData, GetDefaultSystemPromptResponse, SearchSystemPromptsData, SearchSystemPromptsResponse, DeleteSystemPromptData, GetSystemPromptData, GetSystemPromptResponse, UpdateSystemPromptData, UpdateSystemPromptResponse, SetDefaultSystemPromptData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const addSubRecipes = <ThrowOnError extends boolean = false>(options: Options<AddSubRecipesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddSubRecipesResponse2, unknown, ThrowOnError>({
        url: '/agent/add_sub_recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTools = <ThrowOnError extends boolean = false>(options?: Options<GetToolsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetToolsResponse, unknown, ThrowOnError>({
        url: '/agent/tools',
        ...options
    });
};

export const readAllConfig = <ThrowOnError extends boolean = false>(options?: Options<ReadAllConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadAllConfigResponse, unknown, ThrowOnError>({
        url: '/config',
        ...options
    });
};

export const backupConfig = <ThrowOnError extends boolean = false>(options?: Options<BackupConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BackupConfigResponse, unknown, ThrowOnError>({
        url: '/config/backup',
        ...options
    });
};

export const getExtensions = <ThrowOnError extends boolean = false>(options?: Options<GetExtensionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExtensionsResponse, unknown, ThrowOnError>({
        url: '/config/extensions',
        ...options
    });
};

export const addExtension = <ThrowOnError extends boolean = false>(options: Options<AddExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddExtensionResponse, unknown, ThrowOnError>({
        url: '/config/extensions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const removeExtension = <ThrowOnError extends boolean = false>(options: Options<RemoveExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveExtensionResponse, unknown, ThrowOnError>({
        url: '/config/extensions/{name}',
        ...options
    });
};

export const initConfig = <ThrowOnError extends boolean = false>(options?: Options<InitConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<InitConfigResponse, unknown, ThrowOnError>({
        url: '/config/init',
        ...options
    });
};

export const upsertPermissions = <ThrowOnError extends boolean = false>(options: Options<UpsertPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertPermissionsResponse, unknown, ThrowOnError>({
        url: '/config/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const providers = <ThrowOnError extends boolean = false>(options?: Options<ProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProvidersResponse2, unknown, ThrowOnError>({
        url: '/config/providers',
        ...options
    });
};

export const readConfig = <ThrowOnError extends boolean = false>(options: Options<ReadConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/config/read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const recoverConfig = <ThrowOnError extends boolean = false>(options?: Options<RecoverConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecoverConfigResponse, unknown, ThrowOnError>({
        url: '/config/recover',
        ...options
    });
};

export const removeConfig = <ThrowOnError extends boolean = false>(options: Options<RemoveConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveConfigResponse, unknown, ThrowOnError>({
        url: '/config/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const upsertConfig = <ThrowOnError extends boolean = false>(options: Options<UpsertConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertConfigResponse, unknown, ThrowOnError>({
        url: '/config/upsert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const validateConfig = <ThrowOnError extends boolean = false>(options?: Options<ValidateConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ValidateConfigResponse, unknown, ThrowOnError>({
        url: '/config/validate',
        ...options
    });
};

export const confirmPermission = <ThrowOnError extends boolean = false>(options: Options<ConfirmPermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/confirm',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const manageContext = <ThrowOnError extends boolean = false>(options: Options<ManageContextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ManageContextResponse, unknown, ThrowOnError>({
        url: '/context/manage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a Recipe configuration from the current session
 */
export const createRecipe = <ThrowOnError extends boolean = false>(options: Options<CreateRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRecipeResponse2, unknown, ThrowOnError>({
        url: '/recipes/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const decodeRecipe = <ThrowOnError extends boolean = false>(options: Options<DecodeRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DecodeRecipeResponse2, unknown, ThrowOnError>({
        url: '/recipes/decode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const encodeRecipe = <ThrowOnError extends boolean = false>(options: Options<EncodeRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EncodeRecipeResponse2, unknown, ThrowOnError>({
        url: '/recipes/encode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScheduleResponse, unknown, ThrowOnError>({
        url: '/schedule/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteSchedule = <ThrowOnError extends boolean = false>(options: Options<DeleteScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScheduleResponse, unknown, ThrowOnError>({
        url: '/schedule/delete/{id}',
        ...options
    });
};

export const listSchedules = <ThrowOnError extends boolean = false>(options?: Options<ListSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSchedulesResponse2, unknown, ThrowOnError>({
        url: '/schedule/list',
        ...options
    });
};

export const updateSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateScheduleResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inspectRunningJob = <ThrowOnError extends boolean = false>(options: Options<InspectRunningJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InspectRunningJobResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}/inspect',
        ...options
    });
};

export const killRunningJob = <ThrowOnError extends boolean = false>(options: Options<KillRunningJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/schedule/{id}/kill',
        ...options
    });
};

export const pauseSchedule = <ThrowOnError extends boolean = false>(options: Options<PauseScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PauseScheduleResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}/pause',
        ...options
    });
};

export const runNowHandler = <ThrowOnError extends boolean = false>(options: Options<RunNowHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunNowHandlerResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}/run_now',
        ...options
    });
};

export const sessionsHandler = <ThrowOnError extends boolean = false>(options: Options<SessionsHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SessionsHandlerResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}/sessions',
        ...options
    });
};

export const unpauseSchedule = <ThrowOnError extends boolean = false>(options: Options<UnpauseScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnpauseScheduleResponse, unknown, ThrowOnError>({
        url: '/schedule/{id}/unpause',
        ...options
    });
};

export const listSessions = <ThrowOnError extends boolean = false>(options?: Options<ListSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSessionsResponse, unknown, ThrowOnError>({
        url: '/sessions',
        ...options
    });
};

export const getSessionHistory = <ThrowOnError extends boolean = false>(options: Options<GetSessionHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionHistoryResponse, unknown, ThrowOnError>({
        url: '/sessions/{session_id}',
        ...options
    });
};

/**
 * Get all system prompts
 */
export const listSystemPrompts = <ThrowOnError extends boolean = false>(options?: Options<ListSystemPromptsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSystemPromptsResponse, unknown, ThrowOnError>({
        url: '/system-prompts',
        ...options
    });
};

/**
 * Create a new system prompt
 */
export const createSystemPrompt = <ThrowOnError extends boolean = false>(options: Options<CreateSystemPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemPromptResponse, unknown, ThrowOnError>({
        url: '/system-prompts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the default system prompt
 */
export const getDefaultSystemPrompt = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultSystemPromptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultSystemPromptResponse, unknown, ThrowOnError>({
        url: '/system-prompts/default',
        ...options
    });
};

/**
 * Search system prompts by tags
 */
export const searchSystemPrompts = <ThrowOnError extends boolean = false>(options: Options<SearchSystemPromptsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchSystemPromptsResponse, unknown, ThrowOnError>({
        url: '/system-prompts/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a system prompt
 */
export const deleteSystemPrompt = <ThrowOnError extends boolean = false>(options: Options<DeleteSystemPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/system-prompts/{id}',
        ...options
    });
};

/**
 * Get a specific system prompt by ID
 */
export const getSystemPrompt = <ThrowOnError extends boolean = false>(options: Options<GetSystemPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemPromptResponse, unknown, ThrowOnError>({
        url: '/system-prompts/{id}',
        ...options
    });
};

/**
 * Update an existing system prompt
 */
export const updateSystemPrompt = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSystemPromptResponse, unknown, ThrowOnError>({
        url: '/system-prompts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set a system prompt as default
 */
export const setDefaultSystemPrompt = <ThrowOnError extends boolean = false>(options: Options<SetDefaultSystemPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/system-prompts/{id}/set-default',
        ...options
    });
};